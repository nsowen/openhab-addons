/**
 * Copyright (c) 2010-2020 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.openhab.binding.homematicip.internal.transport;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;

import org.eclipse.jdt.annotation.Nullable;
import org.openhab.binding.homematicip.internal.HomematicIPEventListener;
import org.openhab.binding.homematicip.internal.model.HomematicIPObject;

/**
 * Transport layer interface contract used by Homematic IP connections
 *
 * @author Nils Sowen (n.sowen@2scale.net)
 * @since 2020-12-24
 */
public interface Transport {

    /**
     * Salt used for SHA512 hash of access point id
     */
    String CLIENTAUTH_HASH_SALT = "jiLpVitHvWnIGD1yo7MA";

    /**
     * Static lookup URL that is needed to find the correct REST/WSS servers using
     * the Homematic IP cloud service.
     */
    String LOOKUP_URL = "https://lookup.homematic.com:48335/getHost";

    /**
     * Client authentication header name used for HTTP implementation
     */
    String HEADER_CLIENTAUTH = "CLIENTAUTH";

    /**
     * Secret auth token name used for HTTP implementation
     */
    String HEADER_AUTHTOKEN = "AUTHTOKEN";

    /**
     * Version header name used for lookup requests
     */
    String HEADER_VERSION = "VERSION";

    /**
     * API version implemented in this library
     */
    String API_VERSION = "12";

    /**
     * Set client authentication for this transport. Basically this must be a salted SHA512 hash of the
     * access point id, generated by {@link #sha512(String, String) sha512(text, salt)}.
     * For http, this will be added as HTTP header {@link #HEADER_CLIENTAUTH HEADER_CLIENTAUTH}.
     * Please us {@link #setAccessPointId(String) setAccessPointId(String)} which will take care of hashing.
     *
     * @param clientAuth the salted client authentication
     */
    void setClientAuth(String clientAuth);

    /**
     * Sets the secret authentication token used for every request.
     * For http, this must be added as HTTP header {@link #HEADER_AUTHTOKEN HEADER_AUTHTOKEN}.
     *
     * @param authToken
     */
    void setAuthToken(@Nullable String authToken);

    /**
     * If the transport has a set secret auth token, this method returns true. It won't validate
     * the authtoken itself.
     *
     * @return
     */
    boolean hasAuthToken();

    /**
     * Perform asynchronous request to Homematic IP service using the given request object and executor.
     *
     * @param request request containing the proper URL and request body (if applicable)
     * @param clazz class that the response shall be casted to (only if response is received)
     * @param executor executor pool to use for this request
     * @param <T> request type that implements HomematicIPObject
     * @param <V> response type that implements HomematicIPObject
     * @return a completable future with the response object, containing status code, body, runtime in millis.
     */
    <T extends HomematicIPObject, V extends HomematicIPObject> CompletableFuture<Response<T, V>> postAsync(
            Request<T, V> request, Class<V> clazz, Executor executor);

    /**
     * Perform synchronous request to Homematic IP service using the given request object.
     *
     * @param request request containing the proper URL and request body (if applicable)
     * @param clazz class that the response shall be casted to (only if response is received)
     * @param <T> request type that implements HomematicIPObject
     * @param <V> response type that implements HomematicIPObject
     * @return a completable future with the response object, containing status code, body, runtime in millis.
     */
    <T extends HomematicIPObject, V extends HomematicIPObject> Response<T, V> post(Request<T, V> request,
            Class<V> clazz) throws IOException;

    /**
     * Enables the given websocket listener for the connection using this transport.
     *
     * @param wssUrl websocket url as received from lookup process
     * @param listener listener to post new received data to
     */
    void enableWebSocket(String wssUrl, HomematicIPEventListener listener) throws IOException;

    /**
     * Disables the websocket connection.
     */
    void disableWebSocket();

    /**
     * Set access point id for this transport. Basically this will be turned into a salted SHA512 hash of the
     * access point id, generated by {@link #sha512(String, String) sha512(text, salt)}.
     * For http, this will be added as HTTP header {@link #HEADER_CLIENTAUTH HEADER_CLIENTAUTH}.
     *
     * @param accessPointId the access point id
     * @throws NoSuchAlgorithmException
     */
    default void setAccessPointId(@Nullable String accessPointId) {
        if (accessPointId == null) {
            return;
        }
        setClientAuth(sha512(accessPointId, CLIENTAUTH_HASH_SALT).toUpperCase());
    }

    /**
     * Generats SHA512 hash of text using given salt
     *
     * @param text text to hash
     * @param salt salt will be added to the end of the text
     * @return hash
     * @throws NoSuchAlgorithmException in case SHA512 is unavailable
     */
    default String sha512(String text, String salt) {
        final MessageDigest md;
        try {
            md = MessageDigest.getInstance("SHA-512");
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        md.update(text.getBytes(StandardCharsets.UTF_8));
        final var bytes = md.digest(salt.getBytes(StandardCharsets.UTF_8));
        final var sb = new StringBuilder();
        for (int i = 0; i < bytes.length; i++) {
            sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
        }
        return sb.toString();
    }
}
